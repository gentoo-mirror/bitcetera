# Copyright 1999-2008 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$

DESCRIPTION="Manage ruby symlinks"
MAINTAINER="gentoo@a3li.info"
SVN_DATE='$Date: $'
VERSION="20090507"

bindir=/usr/bin
man1dir=/usr/share/man/man1

find_targets() {
	for t in ${ROOT}${bindir}/${1:-ruby}{18,19,20,ee} ; do
		[[ -e $t ]] || continue
		echo ${t}
	done
}

check_target() {
	local target=${1} targets
	targets=( $(find_targets ) )

	# number from the list
	if is_number ${target} && [[ ${target} -ge 1 ]] ; then
		if [[ ${target} -gt ${#targets[@]} ]] ; then
			die -q "Can't use that profile. No suitable Ruby interpreter found."
		elif [[ -e "${targets[$(( ${target} - 1 ))]}" ]] ; then
			target=$(basename ${targets[$((${target} - 1 ))]} )
		else
			write_warning_msg ${targets[$((${target} - 1 ))]}
			die -q "Can't use that profile. No suitable Ruby interpreter found."
		fi
	# `rubyXX' string
	else
	[[ -e "${ROOT}${bindir}/${target}" ]] || \
			die -q "Can't use that profile. No suitable Ruby interpreter found."
	fi

	echo ${target}
}

remove_symlinks() {
	rm -f ${ROOT}${bindir}/{ruby,gem,irb,erb,ri,rdoc,testrb} && \
	rm -f ${ROOT}${man1dir}/ruby.{1,1.gz,1.bz2,1.lzma}
}

create_man_symlinks() {
	local version=${1} 

	for m in ${ROOT}${man1dir}/ruby${version}.{1,1.gz,1.bz2,1.lzma}
	do
		if [[ -e ${m} ]] ; then
			break
		fi
	done

	ln -s "${m}" "${m/ruby${version}/ruby}" || \
		write_error_msg "Could not set man symlink"
}

create_symlinks() {
	local target=${1} version

	version=${target##*ruby}
	
	local path="${ROOT}${bindir}/"
	# these have to work
	for f in "ruby" "irb" "erb" "ri" "testrb" "rdoc" ; do
		ln -s "${path}${f}${version}" "${path}${f}" || \
			die -q "Could not set ${f} symlink"
	done

	# these can fail
	if [[ -e "${path}gem${version}" ]] ; then
		ln -s "${path}gem${version}" "${path}gem" || \
			die -q "Could not set gem symlink"
	else
		write_warning_msg "Could not set gem symlink"
		echo "It appears you do not have RubyGems installed for this profile."
		echo "(For Ruby 1.8 you have to emerge >=dev-ruby/rubygems-1.2.0-r1)"
		echo
	fi
	
	create_man_symlinks ${version}

	create_symlinks_to_executables ${version}

	write_list_start "Successfully switched to profile:"
	write_kv_list_entry "${target}" ""
}

create_symlinks_to_executables() {	
	local path="${ROOT}${bindir}/"
	local version=${1}

	for script in $( grep -il "# this file was generated by rubygems" "${path}"* 2>/dev/null ); do
		if [[ ! $script =~ (18|19|20|ee)$ ]]; then
			rm -f "${script}"
		fi
	done

	for script in $( grep -il "# this file was generated by rubygems" "${path}"*${version} 2>/dev/null ); do
		ln -s "${script}" "${script%${version}}"
	done
}

### show action ###
describe_show() {
	echo "Prints the current configuration."
}

do_show() {
	[[ -z "${@}" ]] || die -q "This function does not expect any arguments"

	local rb=""

	write_list_start "Current Ruby version:"
	if [[ -L "${ROOT}${bindir}/ruby" ]] ; then
		rb=$(basename $(canonicalise ${ROOT}${bindir}/ruby ) )
		write_kv_list_entry $rb ""
	elif [[ -e "${ROOT}${bindir}/ruby" ]] ; then
		write_warning_msg "${bindir}/ruby is a SLOT incompatible version."
		write_kv_list_entry "$(basename $(canonicalise ${ROOT}${bindir}/ruby ) )" ""
	else
		write_kv_list_entry "(none)"
		return 1
	fi
	
	write_list_start "Current Rubygems version:"
	if [[ -L "${ROOT}${bindir}/gem" ]] ; then
		write_kv_list_entry "$(basename $(canonicalise ${ROOT}${bindir}/gem ) )" ""
	elif [[ -e "${ROOT}${bindir}/gem" ]] ; then
		write_warning_msg "${bindir}/gem is a SLOT incompatible version."
		write_kv_list_entry "$(basename $(canonicalise ${ROOT}${bindir}/gem) )" ""
	else
		write_kv_list_entry "gem??" "(not found)"
	fi
}

### list action ###
describe_list() {
	echo "Lists available Ruby profiles."
}

do_list() {
	write_list_start "Available Ruby profiles:"
	local targets=( $(find_targets ) )
	
	if [[ -n ${#targets[@]} ]] ; then
		local i
		for (( i = 0 ; i < ${#targets[@]} ; i = i + 1 )) ; do
			local line="$(basename ${targets[${i}]} )" 

			# Do we have a matching rubygems?
			if [[ -e ${targets[${i}]/ruby/gem} ]] ; then
				line="${line} (with Rubygems)"
			fi

			
			# find out the current version
			if [[ ${targets[${i}]} = $(canonicalise ${ROOT}${bindir}/ruby) ]] ; then
				targets[${i}]="${line} $(highlight '*' )"
			else
				targets[${i}]=${line}
			fi
		done
			write_numbered_list "${targets[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###
describe_set() {
	echo "Switches to a ruby profile."
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

describe_set_parameters() {
	echo "<target>"
}

do_set() {
	[[ -z ${@} ]] && die -q "Parameter expected."
	
	local target=$(check_target ${1})
	
	remove_symlinks || \
		die -q "Could not remove symlinks"

	create_symlinks ${target}
}

### rebuild action ###
describe_rebuild() {
	echo "Rebuild symlinks to gem supplied executables."
}

do_rebuild() {
	if [[ -L "${ROOT}${bindir}/ruby" ]] ; then
		version=$(echo "$(canonicalise ${ROOT}${bindir}/ruby )" | sed -n -e 's/^.*ruby//p' )
		create_symlinks_to_executables ${version}
	fi
}
